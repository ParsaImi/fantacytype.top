services:
  # watchtower:
  #   image: containrrr/watchtower
  #   command:
  #     - "--label-enable"
  #     - "--interval"
  #     - "30"
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  traefik:
    image: traefik:v3.5
    container_name: traefik-demo
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    environment:
      - CLOUDFLARE_DNS_API_TOKEN=8XSAiSTrXd4TegBpBKXiFokBPg9zPWqj5nnHJWjJ
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./config/traefik.yaml:/etc/traefik/traefik.yaml:ro
      - ./data/certs/:/var/traefik/certs/:rw
    networks:
      - frontend
    restart: unless-stopped
  # nginx:
  #   image: nginx:latest
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./data/nginx:/etc/nginx/conf.d
  #     - ./data/certbot/conf:/etc/letsencrypt
  #     - ./data/certbot/www:/var/www/certbot
  #   depends_on:
  #     - webapp
  #   networks:
  #     - app-network
  #   restart: always
  #   command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
  #
  # certbot:
  #    image: certbot/certbot:latest
  #    volumes:
  #      - ./data/certbot/conf:/etc/letsencrypt
  #      - ./data/certbot/www:/var/www/certbot
  #    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
  #    restart: always
  #
  webapp:
    image: svelte:v10.0
    pull_policy: never
    restart: unless-stopped
    environment:
      - NODE_ENV=production
    expose:
      - "5173"
    networks:
      - frontend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.webapp-http.rule=Host(`fantacytype.top`)"
      - "traefik.http.routers.webapp-http.entrypoints=web"
      - "traefik.http.routers.webapp-http.service=webapp-service"
      - "traefik.http.routers.webapp-https.rule=Host(`fantacytype.top`)"
      - "traefik.http.routers.webapp-https.entrypoints=websecure"
      - "traefik.http.routers.webapp-https.service=webapp-service"
      - "traefik.http.routers.webapp-https.tls=true"
      - "traefik.http.routers.webapp-https.tls.certresolver=cloudflare"
      - "traefik.http.services.webapp-service.loadbalancer.server.port=5173"
      - "com.centurylinklabs.watchtower.enable=true" 
  websocket:
    image: websocket:v11.0
    container_name: websocket_server
    pull_policy: never
    expose:
      - "9000"
    restart: unless-stopped
    # If you need to connect to other services like a database, add them here
    networks:
      - frontend
    labels:
      - traefik.enable=true
      - traefik.http.routers.websocket.rule=Host(`ws.fantacytype.top`)
      - traefik.http.routers.websocket.service=websocket-service
      - traefik.http.routers.websocket.entrypoints=web
      - traefik.http.routers.websocket-secure.tls=true
      - traefik.http.routers.websocket-secure.service=websocket-service
      - traefik.http.services.websocket-service.loadbalancer.server.port=9000
      - traefik.http.routers.websocket-secure.tls.certresolver=cloudflare
      - traefik.http.routers.websocket-secure.entrypoints=websecure
      - traefik.http.routers.websocket-secure.rule=Host(`ws.fantacytype.top`)
  fastapi:
    image: fastapi:v4.0
    container_name: fastapi_api
    pull_policy: never
    expose:
      - "8000"
    networks:
      - frontend
    labels:
      - traefik.enable=true
      - traefik.http.routers.fastapi.rule=Host(`api.fantacytype.top`)
      - traefik.http.routers.fastapi.service=fastapi-service
      - traefik.http.routers.fastapi.entrypoints=web
      - traefik.http.routers.fastapi-https.tls=true
      - traefik.http.routers.fastapi-https.service=fastapi-service
      - traefik.http.services.fastapi-service.loadbalancer.server.port=8000
      - traefik.http.routers.fastapi-https.tls.certresolver=cloudflare
      - traefik.http.routers.fastapi-https.entrypoints=websecure
      - traefik.http.routers.fastapi-https.rule=Host(`api.fantacytype.top`)
networks:
    frontend:
      driver: bridge
